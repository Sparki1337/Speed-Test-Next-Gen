#!/usr/bin/env python3
# coding: utf-8
"""
–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Speedtest NextGen –≤ –ø–∞–ø–∫—É (standalone) —Å –ø–æ–º–æ—â—å—é Nuitka.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ version.py.
"""

import argparse
import subprocess
import sys
from pathlib import Path


def get_version_from_file(project_root: Path) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ version.py."""
    version_file = project_root / "version.py"
    if not version_file.exists():
        return None
    
    try:
        # –î–æ–±–∞–≤–∏—Ç—å project_root –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        sys.path.insert(0, str(project_root))
        from version import __version__
        return __version__
    except ImportError:
        return None
    finally:
        # –£–±—Ä–∞—Ç—å –∏–∑ sys.path
        if str(project_root) in sys.path:
            sys.path.remove(str(project_root))


def build(version: str) -> int:
    script_dir = Path(__file__).resolve().parent
    project_root = script_dir.parent

    main_py = project_root / "main.py"
    icon_ico = project_root / "assets" / "app.ico"
    version_py = project_root / "version.py"

    print("="*60)
    print("üöÄ –°–±–æ—Ä–∫–∞ Speedtest NextGen (Standalone)")
    print("="*60)

    if not main_py.exists():
        print(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {main_py}")
        return 1

    if not icon_ico.exists():
        print(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏: {icon_ico}")
        return 1
    
    if not version_py.exists():
        print(f"‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª version.py")
    
    print(f"‚úÖ –§–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {main_py.name}")
    print(f"‚úÖ –ò–∫–æ–Ω–∫–∞: {icon_ico.name}")
    print(f"‚úÖ –í–µ—Ä—Å–∏—è: {version}")

    # –í—ã–±–æ—Ä –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ –¥–ª—è Nuitka: Python 3.13+ —Ç—Ä–µ–±—É–µ—Ç MSVC
    use_msvc = sys.version_info >= (3, 13)
    compiler_flag = "--msvc=latest" if use_msvc else "--mingw64"

    # –°—Ç—Ä–æ–≥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: 'sys.executable -m nuitka'
    cmd = [
        sys.executable,
        "-m",
        "nuitka",
        "--standalone",
        compiler_flag,
        "--enable-plugin=pyqt5",
        "--include-qt-plugins=platforms,styles,iconengines,imageformats,platformthemes,printsupport",
        "--include-package=qfluentwidgets",
        "--include-package-data=qfluentwidgets",
        "--include-package=qframelesswindow",
        "--include-package=openpyxl",
        "--include-package=speedtest",
        f"--windows-icon-from-ico={icon_ico}",
        "--windows-company-name=By Sparki",
        "--windows-product-name=SpeedTest Nextgen",
        "--windows-file-description=SpeedTest NextGen - Network Speed Test Tool",
        f"--windows-file-version={version}",
        f"--windows-product-version={version}",
        "--windows-console-mode=disable",
        "--output-dir=build",
        "--output-filename=SpeedTestNextgen",
        str(main_py),
    ]

    print(f"\nüîß –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä: {'MSVC (latest)' if use_msvc else 'MinGW-w64'}")
    print(f"üêç Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    print(f"\nüì¶ –í–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
    print("   - PyQt5 (GUI framework)")
    print("   - QFluentWidgets (Fluent Design)")
    print("   - openpyxl (Excel export)")
    print("   - speedtest-cli (Speed test engine)")
    
    print(f"\n‚öôÔ∏è  –ó–∞–ø—É—Å–∫ Nuitka...")
    print("="*60)
    
    try:
        result = subprocess.run(cmd, check=True, cwd=project_root)
        print("="*60)
        print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: build/SpeedTestNextgen.dist/")
        print("="*60)
        return result.returncode
    except subprocess.CalledProcessError as e:
        print("="*60)
        print(f"‚ùå [–û—à–∏–±–∫–∞] Nuitka –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥: {e.returncode}")
        print("="*60)
        return e.returncode


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫—É (standalone) —Å –ø–æ–º–æ—â—å—é Nuitka",
    )
    parser.add_argument(
        "-v",
        "--version",
        dest="version",
        default=None,
        help="–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.2). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ.",
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    version = args.version
    
    # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ version.py
    if not version:
        script_dir = Path(__file__).resolve().parent
        project_root = script_dir.parent
        version = get_version_from_file(project_root)
        
        if version:
            print(f"üì¶ –í–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ version.py: {version}")
            use_version = input(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –≤–µ—Ä—Å–∏—é? (y/n) [y]: ").strip().lower()
            if use_version and use_version != 'y':
                version = None
    
    # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç –≤–µ—Ä—Å–∏–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not version:
        try:
            version = input("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.3.0): ").strip()
        except KeyboardInterrupt:
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            sys.exit(130)
    
    if not version:
        print("‚ùå [–û—à–∏–±–∫–∞] –í–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        sys.exit(2)

    sys.exit(build(version=version))