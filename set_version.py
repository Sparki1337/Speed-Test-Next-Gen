#!/usr/bin/env python3
# coding: utf-8
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python set_version.py --version 1.3.0 --status Beta
    python set_version.py --status Stable
"""

import argparse
import re
from pathlib import Path


def update_version_file(version: str = None, status: str = None):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª version.py."""
    version_file = Path(__file__).parent / "version.py"
    
    if not version_file.exists():
        print(f"‚ùå –§–∞–π–ª {version_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    content = version_file.read_text(encoding="utf-8")
    
    # –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é
    if version:
        content = re.sub(
            r'__version__\s*=\s*"[^"]*"',
            f'__version__ = "{version}"',
            content
        )
        print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {version}")
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    if status:
        if status not in ["Beta", "Stable", "RC"]:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Beta, Stable, RC")
            return False
        
        content = re.sub(
            r'__status__\s*=\s*"[^"]*"',
            f'__status__ = "{status}"',
            content
        )
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    version_file.write_text(content, encoding="utf-8")
    print(f"üíæ –§–∞–π–ª {version_file.name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    
    return True


def show_current_version():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é."""
    try:
        from version import __version__, __status__, get_version_string
        print(f"\nüì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {get_version_string()}")
        print(f"   –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏: {__version__}")
        print(f"   –°—Ç–∞—Ç—É—Å: {__status__}\n")
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å version.py")


def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Speedtest NextGen"
    )
    parser.add_argument(
        "--version", "-v",
        type=str,
        help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.3.0)"
    )
    parser.add_argument(
        "--status", "-s",
        type=str,
        choices=["Beta", "Stable", "RC"],
        help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞"
    )
    parser.add_argument(
        "--show",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é"
    )
    
    args = parser.parse_args()
    
    if args.show or (not args.version and not args.status):
        show_current_version()
        return
    
    if update_version_file(args.version, args.status):
        print("\n" + "="*50)
        show_current_version()
        print("="*50)
        print("\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(f"   git add version.py")
        if args.version:
            print(f'   git commit -m "chore: bump version to {args.version}"')
        if args.status:
            print(f'   git commit -m "chore: set status to {args.status}"')


if __name__ == "__main__":
    main()
